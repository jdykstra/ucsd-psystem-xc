Compile Pascal into p-system p-codes on UNIX.

Build using Meson:

        meson setup --buildtype=debugoptimized build/
        meson compile -C build/

If unfamiliar with Meson, see https://mesonbuild.com/ for package installation,
initial setup, and built-in build configuration options.

Building XC on Debian requires the libexplain-dev, libboot-dev, libpng-dev, and
bison packages.

Some tests use the uudecode utility.  In Debian, at least, this is provided by
the sharutils package.

From the PDF: ucsdpsys_osmakgen understands how to generate files needed by
Debian packages.

The git tags indicate which distributions have been verified.           

Peter Miller's original BUILDING text
-------------------------------------

Build(ucsd-psystem-xc)                                  Build(ucsd-psystem-xc)



NAME
        How to build ucsd-psystem-xc

BEFORE YOU START
        There are a few pieces of software you may want to fetch and install
        before you proceed with your installation of ucsd-psystem-xc.

        Boost Library
                You will need the C++ Boost Library.  If you are using a
                package based system, you will need the libboost-devel
                package, or one named something very similar.
                http://boost.org/

        libexplain
                The ucsd-psystem-xc package depends on the libexplain package:
                a library of system-call-specific strerror replacements.
                http://libexplain.sourceforge.net/

        GNU Groff
                The documentation for the ucsd-psystem-xc package was prepared
                using the GNU Groff package (version 1.14 or later).  This
                distribution includes full documentation, which may be
                processed into PostScript or DVI files at install time - if
                GNU Groff has been installed.

SITE CONFIGURATION
        The ucsd-psystem-xc package is configured using the configure program
        included in this distribution.

        The configure shell script attempts to guess correct values for
        various system-dependent variables used during compilation, and
        creates the Makefile and lib/config.h files.  It also creates a shell
        script config.status that you can run in the future to recreate the
        current configuration.

        Normally, you just cd to the directory containing ucsd-psystem-xc's
        source code and then type
                % ./configure
                ...lots of output...
                %

        Running configure takes a minute or two.  While it is running, it
        prints some messages that tell what it is doing.  If you don't want to
        see the messages, run configure using the quiet option; for example,
                % ./configure --quiet
                %

        To compile the ucsd-psystem-xc package in a different directory from
        the one containing the source code, you must use a version of make
        that supports the VPATH variable, such as GNU make.  Change directory
        to the directory where you want the object files and executables to go
        and run the configure script.  The configure script automatically
        checks for the source code in the directory that configure is in and
        in .. (the parent directory).  If for some reason configure is not in
        the source code directory that you are configuring, then it will
        report that it can't find the source code.  In that case, run
        configure with the option --srcdir=DIR, where DIR is the directory
        that contains the source code.

        By default, configure will arrange for the make install command to
        install the ucsd-psystem-xc package's files in /usr/local/bin, and
        /usr/local/man.  There are options which allow you to control the
        placement of these files.

        --prefix=PATH
                This specifies the path prefix to be used in the installation.
                Defaults to /usr/local unless otherwise specified.

        --exec-prefix=PATH
                You can specify separate installation prefixes for
                architecture-specific files files.  Defaults to ${prefix}
                unless otherwise specified.

        --bindir=PATH
                This directory contains executable programs.  On a network,
                this directory may be shared between machines with identical
                hardware and operating systems; it may be mounted read-only.
                Defaults to ${exec_prefix}/bin unless otherwise specified.

        --mandir=PATH
                This directory contains the on-line manual entries.  On a
                network, this directory may be shared between all machines; it
                may be mounted read-only.  Defaults to ${prefix}/man unless
                otherwise specified.

        The configure script ignores most other arguments that you give it;
        use the --help option for a complete list.

        On systems that require unusual options for compilation or linking
        that the ucsd-psystem-xc package's configure script does not know
        about, you can give configure initial values for variables by setting
        them in the environment.  In Bourne-compatible shells, you can do that
        on the command line like this:
                $ CXX='g++ -traditional' LIBS=-lposix ./configure
                ...lots of output...
                $
        Here are the make variables that you might want to override with
        environment variables when running configure.

        Variable: CXX
                C++ compiler program.  The default is c++.

        Variable: CPPFLAGS
                Preprocessor flags, commonly defines and include search paths.
                Defaults to empty.  It is common to use
                CPPFLAGS=-I/usr/local/include to access other installed
                packages.

        Variable: INSTALL
                Program to use to install files.  The default is install if
                you have it, cp otherwise.

        Variable: LIBS
                Libraries to link with, in the form -lfoo -lbar.  The
                configure script will append to this, rather than replace it.
                It is common to use LIBS=-L/usr/local/lib to access other
                installed packages.

        If you need to do unusual things to compile the package, the author
        encourages you to figure out how configure could check whether to do
        them, and mail diffs or instructions to the author so that they can be
        included in the next release.

BUILDING UCSD-PSYSTEM-XC
        All you should need to do is use the
                % make
                ...lots of output...
                %
        command and wait.  When this finishes you should see a directory
        called bin containing several programs.

        If you have GNU Groff installed, the build will also create a
        etc/reference.ps file.  This contains the README file, this BUILDING
        file, and all of the man pages.

        You can remove the program binaries and object files from the source
        directory by using the
                % make clean
                ...lots of output...
                %
        command.  To remove all of the above files, and also remove the
        Makefile and lib/config.h and config.status files, use the
                % make distclean
                ...lots of output...
                %
        command.

        The file etc/configure.in is used to create configure by a GNU program
        called autoconf.  You only need to know this if you want to regenerate
        configure using a newer version of autoconf.

TESTING UCSD-PSYSTEM-XC
        The ucsd-psystem-xc package comes with a test suite.  To run this test
        suite, use the command
                % make sure
                ...lots of output...
                Passed All Tests
                %

        The tests take a few seconds each, with a few very fast, and a couple
        very slow, but it varies greatly depending on your CPU.

        If all went well, the message
                Passed All Tests
        should appear at the end of the make.

INSTALLING UCSD-PSYSTEM-XC
        As explained in the SITE CONFIGURATION section, above, the ucsd-
        psystem-xc package is installed under the /usr/local tree by default.
        Use the --prefix=PATH option to configure if you want some other path.
        More specific installation locations are assignable, use the --help
        option to configure for details.

        All that is required to install the ucsd-psystem-xc package is to use
        the
                % make install
                ...lots of output...
                %
        command.  Control of the directories used may be found in the first
        few lines of the Makefile file and the other files written by the
        configure script; it is best to reconfigure using the configure
        script, rather than attempting to do this by hand.

GETTING HELP
        If you need assistance with the ucsd-psystem-xc package, please do not
        hesitate to contact the author at
                Peter Miller <pmiller@opensource.org.au>
        Any and all feedback is welcome.

        When reporting problems, please include the version number given by
        the
                % ucsdpsys_compile -V
                ucsdpsys_compile version 0.13.D001
                ...warranty disclaimer...
                %
        command.  Please do not send this example; run the program for the
        exact version number.

COPYRIGHT
        ucsd-psystem-xc version 0.13
        Copyright (C) 2006, 2007, 2010, 2011, 2012 Peter Miller

        The ucsd-psystem-xc package is distributed in the hope that it will be
        useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
        General Public License for more details.

        It should be in the LICENSE file included with this distribution.

AUTHOR
        Peter Miller   E-Mail:   pmiller@opensource.org.au
        /\/\*             WWW:   http://miller.emu.id.au/pmiller/



Reference Manual                ucsd-psystem-xc         Build(ucsd-psystem-xc)
